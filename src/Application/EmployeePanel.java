/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.print.PrinterException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Scanner;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Anonymous
 */
public class EmployeePanel extends javax.swing.JFrame {

    LogClass LC;
    private static Scanner x;
    File TextFile = new File("EmployeeLogInfo.txt");
    PreparedStatement pst;
    ResultSet rs;
    LocalDateTime localDate = LocalDateTime.now();
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMM-dd-yy h:mm a");
    String EmployeeLoginDateTime = dtf.format(localDate);

    /**
     * Creates new form EmployeePael
     */
    public EmployeePanel() {
        initComponents();
        LC = new LogClass();
        setPanel("card2");
        InventorySidePanel.setVisible(false);
        ProfileSidePanel.setVisible(false);
        btnSales.setForeground(Color.orange);
        this.setLocationRelativeTo(null);
        DateTime();
        showItems();
        EmployeeReadData();

    }

    public EmployeePanel(Locale lcl) {
        Locale.setDefault(lcl);
        initComponents();
        LC = new LogClass();
        setPanel("card2");
        InventorySidePanel.setVisible(false);
        ProfileSidePanel.setVisible(false);
        btnSales.setForeground(Color.orange);
        this.setLocationRelativeTo(null);
        DateTime();
        showItems();
        EmployeeReadData();

    }

    void setPanel(String cname) {
        CardLayout CL = (CardLayout) CardPanel.getLayout();
        CL.show(CardPanel, cname);
    }

    void DateTime() {
        LocalDateTime localDate = LocalDateTime.now();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMM-dd-yy h:mm a");
        lblEmployeePanelDateTime.setText(dtf.format(localDate));
    }

//ReadData
    private void EmployeeReadData() {
        try {
            if (TextFile.exists() == true) {
                EmployeeLoadData();
            } else {
                TextFile.createNewFile();
                EmployeeLoadData();
            }
        } catch (IOException ex) {
            Logger.getLogger(LogClass.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BorderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        InventorySidePanel = new javax.swing.JPanel();
        btnInventory = new javax.swing.JLabel();
        SalesSidePanel = new javax.swing.JPanel();
        btnSales = new javax.swing.JLabel();
        ProfileSidePanel = new javax.swing.JPanel();
        btnProfile = new javax.swing.JLabel();
        btnSignOut = new javax.swing.JLabel();
        lblEmployeePanelDateTime = new javax.swing.JLabel();
        CardPanel = new javax.swing.JPanel();
        InventoryPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtItemIDView = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cbItemSort = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtItemView = new javax.swing.JTable();
        SalesPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtSalesItemView = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnSalesDisplay = new javax.swing.JButton();
        txtSalesTotal = new javax.swing.JTextField();
        txtSalesAmount = new javax.swing.JTextField();
        txtSalesBalance = new javax.swing.JTextField();
        btnSalesPrint = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnSalesAdd = new javax.swing.JButton();
        txtSalesSubtotal = new javax.swing.JTextField();
        txtSalesPrice = new javax.swing.JTextField();
        txtSalesQuantity = new javax.swing.JTextField();
        txtSalesItemName = new javax.swing.JTextField();
        txtSalesItemID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSalesBill = new javax.swing.JTextPane();
        ProfilePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtProfileCPassword = new javax.swing.JPasswordField();
        txtProfilePassword = new javax.swing.JPasswordField();
        txtProfileContact = new javax.swing.JTextField();
        txtProfileEmail = new javax.swing.JTextField();
        txtProfileName = new javax.swing.JTextField();
        btnProfileUpdate = new javax.swing.JButton();
        txtProfileGender = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(920, 560));

        BorderPanel.setBackground(new java.awt.Color(0, 0, 0));
        BorderPanel.setPreferredSize(new java.awt.Dimension(195, 560));

        jLabel1.setFont(new java.awt.Font("Segoe Script", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BlackLotus.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Application/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("EmployeePanel.jLabel1.text")); // NOI18N

        InventorySidePanel.setBackground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout InventorySidePanelLayout = new javax.swing.GroupLayout(InventorySidePanel);
        InventorySidePanel.setLayout(InventorySidePanelLayout);
        InventorySidePanelLayout.setHorizontalGroup(
            InventorySidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        InventorySidePanelLayout.setVerticalGroup(
            InventorySidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnInventory.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnInventory.setForeground(new java.awt.Color(255, 255, 255));
        btnInventory.setText(bundle.getString("EmployeePanel.btnInventory.text")); // NOI18N
        btnInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInventoryMouseClicked(evt);
            }
        });

        SalesSidePanel.setBackground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout SalesSidePanelLayout = new javax.swing.GroupLayout(SalesSidePanel);
        SalesSidePanel.setLayout(SalesSidePanelLayout);
        SalesSidePanelLayout.setHorizontalGroup(
            SalesSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        SalesSidePanelLayout.setVerticalGroup(
            SalesSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        btnSales.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSales.setForeground(new java.awt.Color(255, 255, 255));
        btnSales.setText(bundle.getString("EmployeePanel.btnSales.text")); // NOI18N
        btnSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSalesMouseClicked(evt);
            }
        });

        ProfileSidePanel.setBackground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout ProfileSidePanelLayout = new javax.swing.GroupLayout(ProfileSidePanel);
        ProfileSidePanel.setLayout(ProfileSidePanelLayout);
        ProfileSidePanelLayout.setHorizontalGroup(
            ProfileSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        ProfileSidePanelLayout.setVerticalGroup(
            ProfileSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        btnProfile.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnProfile.setForeground(new java.awt.Color(255, 255, 255));
        btnProfile.setText(bundle.getString("EmployeePanel.btnProfile.text")); // NOI18N
        btnProfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnProfileMouseClicked(evt);
            }
        });

        btnSignOut.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSignOut.setForeground(new java.awt.Color(255, 255, 255));
        btnSignOut.setText(bundle.getString("EmployeePanel.btnSignOut.text")); // NOI18N
        btnSignOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSignOutMouseClicked(evt);
            }
        });

        lblEmployeePanelDateTime.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeePanelDateTime.setText(bundle.getString("EmployeePanel.lblEmployeePanelDateTime.text")); // NOI18N

        javax.swing.GroupLayout BorderPanelLayout = new javax.swing.GroupLayout(BorderPanel);
        BorderPanel.setLayout(BorderPanelLayout);
        BorderPanelLayout.setHorizontalGroup(
            BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BorderPanelLayout.createSequentialGroup()
                .addGroup(BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BorderPanelLayout.createSequentialGroup()
                        .addComponent(InventorySidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInventory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addGroup(BorderPanelLayout.createSequentialGroup()
                        .addComponent(SalesSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(BorderPanelLayout.createSequentialGroup()
                        .addComponent(ProfileSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnSignOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmployeePanelDateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        BorderPanelLayout.setVerticalGroup(
            BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BorderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SalesSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSales, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InventorySidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProfileSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                .addComponent(btnSignOut, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(lblEmployeePanelDateTime))
        );

        getContentPane().add(BorderPanel, java.awt.BorderLayout.LINE_START);

        CardPanel.setBackground(new java.awt.Color(255, 153, 0));
        CardPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        CardPanel.setRequestFocusEnabled(false);
        CardPanel.setLayout(new java.awt.CardLayout());

        InventoryPanel.setBackground(new java.awt.Color(255, 153, 0));

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText(bundle.getString("EmployeePanel.jLabel14.text")); // NOI18N

        txtItemIDView.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemIDViewKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText(bundle.getString("EmployeePanel.jLabel15.text")); // NOI18N

        cbItemSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item ID", "A-Z", "Z-A", "Category", "Highest Price", "Lowest Price" }));
        cbItemSort.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItemSortItemStateChanged(evt);
            }
        });

        jtItemView.setBackground(new java.awt.Color(204, 204, 204));
        jtItemView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Category", "Quantity", "Price", "Supplier Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtItemView);
        if (jtItemView.getColumnModel().getColumnCount() > 0) {
            jtItemView.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("EmployeePanel.jtItemView.columnModel.title1")); // NOI18N
            jtItemView.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("EmployeePanel.jtItemView.columnModel.title2")); // NOI18N
            jtItemView.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("EmployeePanel.jtItemView.columnModel.title3")); // NOI18N
            jtItemView.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("EmployeePanel.jtItemView.columnModel.title4")); // NOI18N
            jtItemView.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("EmployeePanel.jtItemView.columnModel.title0_1")); // NOI18N
        }

        javax.swing.GroupLayout InventoryPanelLayout = new javax.swing.GroupLayout(InventoryPanel);
        InventoryPanel.setLayout(InventoryPanelLayout);
        InventoryPanelLayout.setHorizontalGroup(
            InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InventoryPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InventoryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(57, 57, 57)
                        .addComponent(txtItemIDView, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbItemSort, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        InventoryPanelLayout.setVerticalGroup(
            InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InventoryPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtItemIDView, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbItemSort, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        CardPanel.add(InventoryPanel, "card3");

        SalesPanel.setBackground(new java.awt.Color(255, 153, 0));
        SalesPanel.setPreferredSize(new java.awt.Dimension(725, 560));

        jtSalesItemView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity ", "Price", "Subtotal"
            }
        ));
        jScrollPane4.setViewportView(jtSalesItemView);
        if (jtSalesItemView.getColumnModel().getColumnCount() > 0) {
            jtSalesItemView.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("EmployeePanel.jtSalesItemView.columnModel.title0")); // NOI18N
            jtSalesItemView.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("EmployeePanel.jtSalesItemView.columnModel.title1")); // NOI18N
            jtSalesItemView.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("EmployeePanel.jtSalesItemView.columnModel.title2")); // NOI18N
            jtSalesItemView.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("EmployeePanel.jtSalesItemView.columnModel.title3")); // NOI18N
            jtSalesItemView.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("EmployeePanel.jtSalesItemView.columnModel.title4")); // NOI18N
        }

        jLabel17.setText(bundle.getString("EmployeePanel.jLabel17.text")); // NOI18N

        jLabel18.setText(bundle.getString("EmployeePanel.jLabel18.text")); // NOI18N

        jLabel19.setText(bundle.getString("EmployeePanel.jLabel19.text")); // NOI18N

        btnSalesDisplay.setText(bundle.getString("EmployeePanel.btnSalesDisplay.text")); // NOI18N
        btnSalesDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalesDisplayActionPerformed(evt);
            }
        });

        txtSalesTotal.setEditable(false);

        txtSalesAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSalesAmountKeyReleased(evt);
            }
        });

        txtSalesBalance.setEditable(false);

        btnSalesPrint.setText(bundle.getString("EmployeePanel.btnSalesPrint.text")); // NOI18N
        btnSalesPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalesPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSalesPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(btnSalesDisplay))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel18)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel17)
                                .addComponent(jLabel19))
                            .addGap(35, 35, 35)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtSalesTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                .addComponent(txtSalesAmount)
                                .addComponent(txtSalesBalance)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalesDisplay)
                    .addComponent(btnSalesPrint))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        btnSalesAdd.setText(bundle.getString("EmployeePanel.btnSalesAdd.text")); // NOI18N
        btnSalesAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalesAddActionPerformed(evt);
            }
        });

        txtSalesSubtotal.setEditable(false);

        txtSalesPrice.setEditable(false);

        txtSalesQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSalesQuantityKeyReleased(evt);
            }
        });

        txtSalesItemName.setEditable(false);

        txtSalesItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSalesItemIDKeyReleased(evt);
            }
        });

        jLabel10.setText(bundle.getString("EmployeePanel.jLabel10.text")); // NOI18N

        jLabel11.setText(bundle.getString("EmployeePanel.jLabel11.text")); // NOI18N

        jLabel12.setText(bundle.getString("EmployeePanel.jLabel12.text")); // NOI18N

        jLabel13.setText(bundle.getString("EmployeePanel.jLabel13.text")); // NOI18N

        jLabel8.setText(bundle.getString("EmployeePanel.jLabel8.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSalesItemID)
                            .addComponent(txtSalesItemName)
                            .addComponent(txtSalesQuantity)
                            .addComponent(txtSalesPrice)
                            .addComponent(txtSalesSubtotal)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalesAdd)))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalesSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(btnSalesAdd)
                .addGap(22, 22, 22))
        );

        jScrollPane2.setViewportView(txtSalesBill);

        javax.swing.GroupLayout SalesPanelLayout = new javax.swing.GroupLayout(SalesPanel);
        SalesPanel.setLayout(SalesPanelLayout);
        SalesPanelLayout.setHorizontalGroup(
            SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SalesPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(34, 34, 34))
        );
        SalesPanelLayout.setVerticalGroup(
            SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );

        CardPanel.add(SalesPanel, "card2");

        ProfilePanel.setBackground(new java.awt.Color(255, 153, 0));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText(bundle.getString("EmployeePanel.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(bundle.getString("EmployeePanel.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText(bundle.getString("EmployeePanel.jLabel4.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText(bundle.getString("EmployeePanel.jLabel5.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(bundle.getString("EmployeePanel.jLabel6.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText(bundle.getString("EmployeePanel.jLabel7.text")); // NOI18N

        btnProfileUpdate.setText(bundle.getString("EmployeePanel.btnProfileUpdate.text")); // NOI18N
        btnProfileUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileUpdateActionPerformed(evt);
            }
        });

        txtProfileGender.setEditable(false);

        javax.swing.GroupLayout ProfilePanelLayout = new javax.swing.GroupLayout(ProfilePanel);
        ProfilePanel.setLayout(ProfilePanelLayout);
        ProfilePanelLayout.setHorizontalGroup(
            ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfilePanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(134, 134, 134)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProfilePanelLayout.createSequentialGroup()
                        .addComponent(txtProfileEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(230, Short.MAX_VALUE))
                    .addGroup(ProfilePanelLayout.createSequentialGroup()
                        .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnProfileUpdate)
                            .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtProfilePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProfileContact, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProfileCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProfileGender, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        ProfilePanelLayout.setVerticalGroup(
            ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfilePanelLayout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtProfileEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtProfileContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtProfileGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtProfilePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtProfileCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(btnProfileUpdate)
                .addGap(137, 137, 137))
        );

        CardPanel.add(ProfilePanel, "card4");

        getContentPane().add(CardPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInventoryMouseClicked
        setPanel("card3");
        InventorySidePanel.setVisible(true);
        SalesSidePanel.setVisible(false);
        ProfileSidePanel.setVisible(false);
        btnInventory.setForeground(Color.orange);
        btnSales.setForeground(Color.WHITE);
        btnProfile.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnInventoryMouseClicked

    private void btnSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalesMouseClicked
        setPanel("card2");
        InventorySidePanel.setVisible(false);
        SalesSidePanel.setVisible(true);
        ProfileSidePanel.setVisible(false);
        btnInventory.setForeground(Color.WHITE);
        btnSales.setForeground(Color.orange);
        btnProfile.setForeground(Color.WHITE);

    }//GEN-LAST:event_btnSalesMouseClicked

    private void btnProfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProfileMouseClicked
        setPanel("card4");
        InventorySidePanel.setVisible(false);
        SalesSidePanel.setVisible(false);
        ProfileSidePanel.setVisible(true);
        btnInventory.setForeground(Color.WHITE);
        btnSales.setForeground(Color.WHITE);
        btnProfile.setForeground(Color.orange);

    }//GEN-LAST:event_btnProfileMouseClicked

    private void btnSalesAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalesAddActionPerformed
        int QTY = Integer.parseInt(txtSalesQuantity.getText());
        int Quantity = GetQuantity();

        if (Quantity > 0) {
            try {
                int Item_ID = Integer.parseInt(txtSalesItemID.getText());
                String sql = "UPDATE `stock_details` SET `Quantity`=? WHERE `Item_ID`=?";

                pst = DBConnection.getConnection().prepareStatement(sql);
                pst.setInt(1, Quantity);
                pst.setInt(2, Item_ID);
                if (pst.executeUpdate() > 0) {
                    int Profit = GetProfit();
                    int SubProfit = Profit * QTY;
                    LC.profitInsert(SubProfit);
                    DefaultTableModel model = new DefaultTableModel();
                    model = (DefaultTableModel) jtSalesItemView.getModel();
                    model.addRow(new Object[]{
                        txtSalesItemID.getText(),
                        txtSalesItemName.getText(),
                        txtSalesQuantity.getText(),
                        txtSalesPrice.getText(),
                        txtSalesSubtotal.getText(),});
                    int Total = 0;
                    for (int i = 0; i < jtSalesItemView.getRowCount(); i++) {
                        Total = Total + Integer.parseInt(jtSalesItemView.getValueAt(i, 4).toString());
                        txtSalesTotal.setText(Integer.toString(Total));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                txtSalesItemID.setText(null);
                txtSalesItemName.setText(null);
                txtSalesQuantity.setText(null);
                txtSalesPrice.setText(null);
                txtSalesSubtotal.setText(null);
                txtSalesItemID.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Entered quantity exceeds the stock", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSalesAddActionPerformed

    private void cbItemSortItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbItemSortItemStateChanged
        try {
            Object SI = cbItemSort.getSelectedItem();
            if ("Item ID".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Item_ID ASC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("A-Z".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Item_Name ASC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Z-A".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Item_Name DESC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Category".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Category ASC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Lowest Price".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Price ASC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Highest Price".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Price DESC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Supplier ID".equals(SI)) {
                String sql = "SELECT `Item_Name`, `Category`, `Quantity`, `Price`, `Supplier_ID` FROM `stock_details` ORDER BY Supplier_ID ASC";
                pst = DBConnection.getConnection().prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);

                if (rs.isBeforeFirst()) {
                    int r = 0;
                    while (rs.next()) {
                        jtItemView.getModel().setValueAt(rs.getString(1), r, 0);
                        jtItemView.getModel().setValueAt(rs.getString(2), r, 1);
                        jtItemView.getModel().setValueAt(rs.getString(3), r, 2);
                        jtItemView.getModel().setValueAt(rs.getString(4), r, 3);
                        jtItemView.getModel().setValueAt(rs.getString(5), r, 4);
                        r++;

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            System.err.println("Error :" + ex.getMessage());
        }
    }//GEN-LAST:event_cbItemSortItemStateChanged

    private void btnProfileUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileUpdateActionPerformed
        int YesOrNo = JOptionPane.showConfirmDialog(null, "Are you sure?", "WARNING!", JOptionPane.YES_NO_OPTION);
        if (YesOrNo == 0) {
            if (txtProfilePassword.getText().trim().equals(txtProfileCPassword.getText().trim())) {
                int Employee_ID = GetEmployeeUserID();
                String Name = txtProfileName.getText();
                String Email = txtProfileEmail.getText();
                int Contact_Number = Integer.parseInt(txtProfileContact.getText());
                String Password = txtProfilePassword.getText();
                try {
                    String sql = "UPDATE `employee_details` SET `Name`=?,`Email`=?,`Contact_Number`=?, `Password`=? WHERE `Employee_ID`=?";

                    pst = DBConnection.getConnection().prepareStatement(sql);
                    pst.setString(1, Name);
                    pst.setString(2, Email);
                    pst.setInt(3, Contact_Number);
                    pst.setString(4, Password);
                    pst.setInt(5, Employee_ID);
                    if (pst.executeUpdate() > 0) {
                        JOptionPane.showMessageDialog(null, "Profile updated");
                    } else {
                        JOptionPane.showMessageDialog(null, "Update error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    txtProfileName.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Password does not match", "Error", JOptionPane.ERROR_MESSAGE);
                txtProfilePassword.setText(null);
                txtProfileCPassword.setText(null);
                txtProfilePassword.requestFocus();
            }
        }

    }//GEN-LAST:event_btnProfileUpdateActionPerformed

    private void btnSalesDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalesDisplayActionPerformed
        txtSalesBill.setText(null);

        String Total = txtSalesTotal.getText();
        String Amount = txtSalesAmount.getText();
        String Balance = txtSalesBalance.getText();

        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jtSalesItemView.getModel();

        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");
        txtSalesBill.setText(txtSalesBill.getText() + " " + "                   No. JAVA, Highlevel Road, Pannipitiya" + "\t" + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "\t" + "0112 333 444 | 071 222 333" + "\t" + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");
        txtSalesBill.setText(txtSalesBill.getText() + "Item" + "\t" + "Price" + "\t" + "Qty" + "\t" + "Subtotal" + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");

        for (int i = 0; i < model.getRowCount(); i++) {
            String ItemName = (String) model.getValueAt(i, 1);
            String ItemPrice = (String) model.getValueAt(i, 2);
            String ItemQty = (String) model.getValueAt(i, 3);
            String ItemST = (String) model.getValueAt(i, 4);
            txtSalesBill.setText(txtSalesBill.getText() + ItemName + "\t" + ItemPrice + "\t" + ItemQty + "\t" + ItemST + "\n");
        }
        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");
        txtSalesBill.setText(txtSalesBill.getText() + "Total" + "\t\t\t" + Total + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "Amount" + "\t\t\t" + Amount + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "Balance" + "\t\t\t" + Balance + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");
        txtSalesBill.setText(txtSalesBill.getText() + "\t" + "Thank You for shopping with us" + "\t" + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "\t" + "     *IMPORTANT NOTICE*" + "\t" + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "In case of price discrepancy, return the item and bill within" + "\n" + "\t" + "7 days for refund of difference." + "\n");
        txtSalesBill.setText(txtSalesBill.getText() + "------------------------------------------------------------------------------------\n");
        txtSalesBill.setText(txtSalesBill.getText() + "\t" + "            (C)BlackLotus" + "\t" + "\n");

    }//GEN-LAST:event_btnSalesDisplayActionPerformed

    private void txtSalesItemIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalesItemIDKeyReleased
        try {
            String sql = "SELECT `Item_ID`,`Item_Name`,`Price` FROM `stock_details` WHERE `Item_ID` =?";
            pst = DBConnection.getConnection().prepareStatement(sql);
            pst.setString(1, txtSalesItemID.getText());

            rs = pst.executeQuery();
            if (rs.next()) {
                int SIID = rs.getInt("Item_ID");
                txtSalesItemID.setText(String.valueOf(SIID));
                String SIN = rs.getString("Item_Name");
                txtSalesItemName.setText(SIN);
                int SIP = rs.getInt("Price");
                txtSalesPrice.setText(String.valueOf(SIP));

            } else {
                JOptionPane.showMessageDialog(null, "Invalid Item ID", "Error", JOptionPane.ERROR_MESSAGE);
                txtSalesItemID.setText(null);
                txtSalesItemName.setText(null);
                txtSalesQuantity.setText(null);
                txtSalesPrice.setText(null);
                txtSalesSubtotal.setText(null);
                txtSalesItemID.requestFocus();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_txtSalesItemIDKeyReleased

    private void txtSalesQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalesQuantityKeyReleased
        int SQ = Integer.parseInt(txtSalesQuantity.getText());
        int SIP = Integer.parseInt(txtSalesPrice.getText());
        int ST = SIP * SQ;
        txtSalesSubtotal.setText(String.valueOf(ST));
    }//GEN-LAST:event_txtSalesQuantityKeyReleased

    private void txtSalesAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalesAmountKeyReleased
        int Total = Integer.parseInt(txtSalesTotal.getText());
        int Amount = Integer.parseInt(txtSalesAmount.getText());
        int Balance = Amount - Total;
        txtSalesBalance.setText(String.valueOf(Balance));
    }//GEN-LAST:event_txtSalesAmountKeyReleased

    private void btnSalesPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalesPrintActionPerformed
        addSales();
        try {
            txtSalesBill.print();
        } catch (PrinterException ex) {
            Logger.getLogger(EmployeePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSalesPrintActionPerformed

    private void txtItemIDViewKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDViewKeyReleased
        DefaultTableModel DTM = (DefaultTableModel) jtItemView.getModel();
        String Search = txtItemIDView.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(DTM);
        jtItemView.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(Search));
    }//GEN-LAST:event_txtItemIDViewKeyReleased

    private void btnSignOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSignOutMouseClicked
        String EmployeeUserName = txtProfileName.getText();

        try {
            String sql = "SELECT Employee_ID FROM employee_details WHERE Name =?";
            pst = DBConnection.getConnection().prepareStatement(sql);
            pst.setString(1, EmployeeUserName);
            rs = pst.executeQuery();
            if (rs.next()) {
                int EmployeeUserID = rs.getInt("Employee_ID");
                LocalDateTime localdate = LocalDateTime.now();
                DateTimeFormatter DTF = DateTimeFormatter.ofPattern("MMM-dd-yy h:mm a");
                String EmployeeLogoutDateTime = DTF.format(localdate);
                LC.EmployeeInsert(String.valueOf(EmployeeUserID), EmployeeUserName, EmployeeLoginDateTime, EmployeeLogoutDateTime);
                EmployeeInsertFile();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }

        this.dispose();
        SignIn SI = new SignIn();
        SI.setVisible(true);
    }//GEN-LAST:event_btnSignOutMouseClicked

    public int GetQuantity() {
        int Item_ID = Integer.parseInt(txtSalesItemID.getText());
        int NewQty = Integer.parseInt(txtSalesQuantity.getText());
        int quantity = 0;
        try {
            String SQL = "SELECT `Quantity` FROM `stock_details` WHERE `Item_ID` =?";
            pst = DBConnection.getConnection().prepareStatement(SQL);
            pst.setString(1, txtSalesItemID.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                int OldQty = rs.getInt("Quantity");
                quantity = OldQty - NewQty;
                return quantity;
            }
            return quantity;
        } catch (SQLException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            return quantity;
        } finally {
            return quantity;
        }
    }

    public void showItems() {
        try {
            String sql = "SELECT stock_details.Item_Name,stock_details.Category,stock_details.Quantity,stock_details.Price,supplier_details.Supplier_Name FROM stock_details INNER JOIN supplier_details ON stock_details.Supplier_ID = supplier_details.Supplier_ID";
            pst = DBConnection.getConnection().prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);
            DefaultTableModel DTM = (DefaultTableModel) jtItemView.getModel();
            DTM.setRowCount(0);
            if (rs.isBeforeFirst()) {
                while (rs.next()) {
                    Object O[] = {rs.getString("Item_Name"), rs.getString("Category"), rs.getInt("Quantity"), rs.getInt("Price"), rs.getString("Supplier_Name")};
                    DTM.addRow(O);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Table is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            System.err.println("Error :" + ex.getMessage());
        }
    }

    public int GetEmployeeUserID() {
        String Email = txtProfileEmail.getText();
        int EID = 0;

        try {
            String SQL = "SELECT `Employee_ID` FROM `employee_details` WHERE `Email` =?";
            pst = DBConnection.getConnection().prepareStatement(SQL);
            pst.setString(1, Email);
            rs = pst.executeQuery();
            if (rs.next()) {
                EID = rs.getInt("Employee_ID");
                return EID;
            }
            return EID;
        } catch (SQLException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            return EID;
        } finally {
            return EID;
        }

    }

    //Employee LoadData    
    void EmployeeLoadData() {
        try {
            x = new Scanner(new File("EmployeeLogInfo.txt"));
            x.useDelimiter("[;\n]");
            while (x.hasNext()) {
                LC.EmployeeUserID[LC.elements] = x.next();
                LC.EmployeeUserName[LC.elements] = x.next();
                LC.EmployeeLoginDateTime[LC.elements] = x.next();
                LC.EmployeeLogoutDateTime[LC.elements] = x.next();
                LC.elements++;
            }
            x.close();
        } catch (IOException ex) {
            Logger.getLogger(LogClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void EmployeeInsertFile() {
        try {
            String result = "";
            for (int x = 0; x < LC.elements; x++) {
                result += LC.EmployeeUserID[x] + ";";
                result += LC.EmployeeUserName[x] + ";";
                result += LC.EmployeeLoginDateTime[x] + ";";
                result += LC.EmployeeLogoutDateTime[x] + "\n";
            }
            File newFile = new File("EmployeeTemp.txt");
            FileWriter TempFile = new FileWriter(newFile, true);
            BufferedWriter writer = new BufferedWriter(TempFile);
            writer.append(result);
            writer.close();
            TextFile.delete();
            File dump = new File("EmployeeLogInfo.txt");
            newFile.renameTo(dump);
        } catch (IOException ex) {
            Logger.getLogger(LogClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void employeeProfile(String PEmail) {
        try {
            String sql = "SELECT Name,Email,Contact_Number,Gender FROM employee_details WHERE Email =?";
            pst = DBConnection.getConnection().prepareStatement(sql);
            pst.setString(1, PEmail);
            rs = pst.executeQuery();
            if (rs.next()) {
                String AN = rs.getString("Name");
                txtProfileName.setText(AN);
                String AE = rs.getString("Email");
                txtProfileEmail.setText(AE);
                int ACN = rs.getInt("Contact_Number");
                txtProfileContact.setText(String.valueOf(ACN));
                String AG = rs.getString("Gender");
                txtProfileGender.setText(AG);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }

    public int GetProfit() {
        int Item_ID = Integer.parseInt(txtSalesItemID.getText());
        int profit = 0;
        try {
            String SQL = "SELECT `Profit` FROM `stock_details` WHERE `Item_ID` =?";
            pst = DBConnection.getConnection().prepareStatement(SQL);
            pst.setString(1, txtSalesItemID.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                int getprofit = rs.getInt("Profit");
                profit = getprofit;
                return profit;
            }
            return profit;
        } catch (SQLException ex) {
            Logger.getLogger(EmployeePanel.class.getName()).log(Level.SEVERE, null, ex);
            return profit;
        } finally {
            return profit;
        }
    }

    public void addSales() {
        int TotProfit = 0;
        for (int value : LC.arrayProfit) {
            TotProfit = TotProfit + value;
        }
        int Total = Integer.parseInt(txtSalesTotal.getText());
        int Profit = TotProfit;
        DateFormat DF = new SimpleDateFormat("yyyy/MM/dd");
        Date date = new Date();
        String Sold_Date = DF.format(date);
        try {
            String sql = "INSERT INTO `sales_details`(`Total`, `Profit`, `Sold_Date`) VALUES (?,?,?)";

            pst = DBConnection.getConnection().prepareStatement(sql);
            pst.setInt(1, Total);
            pst.setInt(2, Profit);
            pst.setString(3, Sold_Date);
            if (pst.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(null, "Sales details inserted");
            }

        } catch (SQLException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            txtSalesTotal.setText(null);
            txtSalesAmount.setText(null);
            txtSalesBalance.setText(null);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeePanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BorderPanel;
    private javax.swing.JPanel CardPanel;
    private javax.swing.JPanel InventoryPanel;
    private javax.swing.JPanel InventorySidePanel;
    private javax.swing.JPanel ProfilePanel;
    private javax.swing.JPanel ProfileSidePanel;
    private javax.swing.JPanel SalesPanel;
    private javax.swing.JPanel SalesSidePanel;
    private javax.swing.JLabel btnInventory;
    private javax.swing.JLabel btnProfile;
    private javax.swing.JButton btnProfileUpdate;
    private javax.swing.JLabel btnSales;
    private javax.swing.JButton btnSalesAdd;
    private javax.swing.JButton btnSalesDisplay;
    private javax.swing.JButton btnSalesPrint;
    private javax.swing.JLabel btnSignOut;
    private javax.swing.JComboBox<String> cbItemSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jtItemView;
    private javax.swing.JTable jtSalesItemView;
    private javax.swing.JLabel lblEmployeePanelDateTime;
    private javax.swing.JTextField txtItemIDView;
    private javax.swing.JPasswordField txtProfileCPassword;
    private javax.swing.JTextField txtProfileContact;
    private javax.swing.JTextField txtProfileEmail;
    private javax.swing.JTextField txtProfileGender;
    private javax.swing.JTextField txtProfileName;
    private javax.swing.JPasswordField txtProfilePassword;
    private javax.swing.JTextField txtSalesAmount;
    private javax.swing.JTextField txtSalesBalance;
    private javax.swing.JTextPane txtSalesBill;
    private javax.swing.JTextField txtSalesItemID;
    private javax.swing.JTextField txtSalesItemName;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSalesQuantity;
    private javax.swing.JTextField txtSalesSubtotal;
    private javax.swing.JTextField txtSalesTotal;
    // End of variables declaration//GEN-END:variables

}
